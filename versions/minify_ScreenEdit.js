let zoomSpeed=document.querySelector(".screenshotToolContainer").getAttribute("zoomSpeed"),moveSpeed=document.querySelector(".screenshotToolContainer").getAttribute("moveSpeed");const configA={displayBorder:"2px solid black"};configA.displayWidth=document.querySelector(".screenshotToolContainer").getAttribute("canvasWidth");let styleForImage={border:"10px solid red",backgroundColor:"lightgray",padding:"10px",borderRadius:"5px"},windowWidth=window.screen.width*window.devicePixelRatio,windowHeight=window.screen.height*window.devicePixelRatio,number=windowWidth/windowHeight,preparedNumber=parseFloat(number.toFixed(10));configA.displayHeight=configA.displayWidth/preparedNumber;const htmlCode='\n    <canvas class="screenshotToolCanvas"></canvas>\n    <div class="screenshotToolMenu">\n        <div class="wrapper">\n            <button style="transform: translateX(5px) translateY(1px);">&#x2212;</button>\n            <input class="screenshotToolInputWrapper" type="range" min="1" max="5" value="5"/>\n            <button style="transform: translateX(-5px) translateY(1px);">&#x2b;</button>\n        </div>\n        <button class="screenshotToolSave"><i class="fa fa-camera" style="font-size:15px"></i></button>\n    </div>\n';document.querySelector(".screenshotToolContainer").insertAdjacentHTML("beforeend",htmlCode);let cssCode="\n.screenshotToolContainer {   \n    margin: 0 !important; padding: 0 !important;\n    display: flex;\n    flex-direction: column;\n}\n\n.screenshotToolContainer * {\n    box-sizing: border-box;\n}\n\n.screenshotToolMenu {\n    margin: 0 !important; padding: 0 !important;\n    display: flex;\n    flex-direction: row;\n    border: 2px solid black;\n    border-top: none;\n    height: 1.75em;\n}\n.wrapper {\n    margin: 0 !important; padding: 0 !important;\n    display: flex;\n    flex-direction: row;\n    position: relative;\n    height: 100%;\n    width: 90%;\n}\n\n.wrapper > button {\n    margin: 0 !important; padding: 0 !important;\n    background-color: transparent;\n    border: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    width: 10%;\n    font-size: 1.5em;\n    font-weight: 100;\n    padding: 0; margin: 0;\n}\n\n.screenshotToolInputWrapper {\n    -webkit-appearance: none;\n    border: none;\n    width: 80%;\n    height: 100%;\n    transform: translateY(-0.15em);\n}\n\n.screenshotToolInputWrapper::-webkit-slider-runnable-track::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    left: 50%;\n    bottom: 0;\n    background-color: grey; /* Set the color to grey */\n}\n.screenshotToolInputWrapper::-webkit-slider-thumb {\n    -webkit-appearance: none; /* Override default look */\n    appearance: none;\n    margin-top: -4.5px; /* Centers thumb on the track */\n    background-color: rgb(76, 154, 222);\n    border-radius: 50%;\n    height: 12.5px;\n    width: 12.5px;    \n}\n\n.screenshotToolInputWrapper::-webkit-slider-runnable-track {\n    background-color: rgb(76, 154, 222);\n    height: 0.15rem;\n    border-radius: 2px;\n}\n\n.screenshotToolInputWrapper::-moz-range-track {\n    background-color: rgb(76, 154, 222);\n    height: 0.15rem;\n    border-radius: 2px;\n\n}\n.screenshotToolSave {\n    display: flex;\n    align-items: center; justify-content: center;\n    color: rgb(76, 154, 222);\n    width: 10%;\n    height: 100%;\n    line-height: 100%;\n    background-color: aliceblue;\n    border: none;\n}\n.screenshotToolSave:hover {\n    background-color: lightsteelblue;\n}\n",sheet=document.createElement("style");sheet.innerHTML=cssCode,document.head.appendChild(sheet);let mouseX=0,mouseY=0,prevMouseX=0,prevMouseY=0,imageX=0,imageY=0,isDragging=!1,firstDrag=!1,actualZoom=5,inputZoom=document.querySelector(".screenshotToolInputWrapper");inputZoom.addEventListener("input",(e=>{actualZoom=e.target.value;const t=img.width*actualZoom,n=img.height*actualZoom;t<canvasWidth&&(actualZoom=canvasWidth/img.width),n<canvasHeight&&(actualZoom=canvasHeight/img.height),imageX+t>canvasWidth&&(imageX=Math.max(0,canvasWidth-t)),imageY+n>canvasHeight&&(imageY=Math.max(0,canvasHeight-n));const a=canvasWidth/actualZoom,o=canvasHeight/actualZoom;console.log("Visible Width:",a),console.log("Visible Height:",o),ctx.clearRect(0,0,canvas.width,canvas.height),ctx.drawImage(img,imageX,imageY,t,n)}));const configB={displayWidth:`${window.outerWidth}`,displayHeight:`${window.outerHeight}`,displayBorder:"2px solid red"};function applyStyles(e,t){Object.assign(e.style,t)}function blobToImageBitmap(e){return new Promise(((t,n)=>{const a=new Image;a.onload=()=>{t(createImageBitmap(a))},a.onerror=n,a.src=URL.createObjectURL(e)}))}document.querySelector(".screenshotToolContainer").style.maxWidth=`${configA.displayWidth}px`;const canvas=document.querySelector(".screenshotToolCanvas"),ctx=canvas.getContext("2d");let img;async function pasteScreenshotToCanvas(e){const t=e.clipboardData||window.clipboardData;if(!t)return;const n=t.items;if(n)for(const e of n)if(-1!==e.type.indexOf("image")){const t=e.getAsFile();try{img=await blobToImageBitmap(t),canvas.width=img.width,canvas.height=img.height,ctx.clearRect(0,0,canvas.width,canvas.height),ctx.drawImage(img,imageX,imageY,img.width*actualZoom,img.height*actualZoom)}catch(e){console.error(e)}break}}function clampToRange(e){return Math.min(1,Math.max(-1,e))}applyStyles(canvas,{width:`${configA.displayWidth}px`,height:`${configA.displayHeight}px`,border:configA.displayBorder}),window.addEventListener("paste",(e=>{console.log("paste event"),pasteScreenshotToCanvas(e)})),canvas.addEventListener("mousedown",(function(e){0===e.button&&(isDragging=!0)})),canvas.addEventListener("mouseup",(function(e){0===e.button&&(isDragging=!1,firstDrag=!1)})),canvas.addEventListener("mousemove",(function(e){if(1===e.buttons){prevMouseX=mouseX,prevMouseY=mouseY,mouseX=e.clientX-canvas.offsetLeft,mouseY=e.clientY-canvas.offsetTop;let t=clampToRange(mouseX-prevMouseX),n=clampToRange(mouseY-prevMouseY);if(0==firstDrag)firstDrag=!0;else{if(imageX+t<0&&-(imageX-img.width+t)/actualZoom<canvas.width)if(imageX+t*moveSpeed<0&&-(imageX-img.width+t*moveSpeed)/actualZoom<canvas.width)imageX+=t*moveSpeed;else if(-1==t){parseInt(canvas.width- -(imageX-img.width+t)/actualZoom)}if(imageY+n<0&&-(imageY-img.height+n)/actualZoom<canvas.height)if(imageY+n*moveSpeed<0&&-(imageY-img.height+n*moveSpeed)/actualZoom<canvas.height)imageY+=n*moveSpeed;else if(-1==n){let e=parseInt(canvas.height- -(imageY-img.height+n)/actualZoom);imageY+=n*e}console.log(),ctx.clearRect(0,0,canvas.width,canvas.height),ctx.drawImage(img,imageX,imageY,img.width*actualZoom,img.height*actualZoom)}}}));const minZoom=1,maxZoom=5,canvasWidth=canvas.width,canvasHeight=canvas.height;function createImageElement(e){const t=new Image;return t.src=e,t.classList.add("screenshotToolInput"),t.style.width=`${configA.displayWidth}px`,t}function saveCanvasAsBlob(){const e=canvas.toDataURL("image/png"),t=atob(e.split(",")[1]),n=[];for(let e=0;e<t.length;e++)n.push(t.charCodeAt(e));return new Blob([new Uint8Array(n)],{type:"image/png"})}function getBase64FromBlob(e){return new Promise((t=>{const n=new FileReader;n.onload=function(e){const n=e.target.result;t(n)},n.readAsDataURL(e)}))}async function saveCanvas(){event.preventDefault();const e=saveCanvasAsBlob(),t=URL.createObjectURL(e),n=new FileReader;if(n.onload=function(e){e.target.result},n.readAsDataURL(e),document.classList.contains("screenshotToolInput")){const t=await getBase64FromBlob(e);document.querySelector(".blobData").src=t}try{let e=document.querySelector(".screenshotToolInput"),n=createImageElement(t);if(e)e.classList.forEach((e=>{"screenshotToolCanvas"!=e&&n.classList.add(e)})),e.replaceWith(n);else{let e=document.createElement("div");e.appendChild(n),document.body.appendChild(e)}applyStyles(e,styleForImage)}catch(e){console.error("Wystąpił błąd:",e)}}canvas.addEventListener("wheel",(function(e){e.preventDefault();const t=e.deltaY;t>0?actualZoom=Math.max(1,actualZoom-zoomSpeed):t<0&&(actualZoom=Math.min(5,actualZoom+zoomSpeed));const n=img.width*actualZoom,a=img.height*actualZoom;n<canvasWidth&&(actualZoom=canvasWidth/img.width),a<canvasHeight&&(actualZoom=canvasHeight/img.height),imageX+n>canvasWidth&&(imageX=Math.max(0,canvasWidth-n)),imageY+a>canvasHeight&&(imageY=Math.max(0,canvasHeight-a));const o=canvasWidth/actualZoom,i=canvasHeight/actualZoom;console.log("Visible Width:",o),console.log("Visible Height:",i),ctx.clearRect(0,0,canvas.width,canvas.height),ctx.drawImage(img,imageX,imageY,n,a)})),document.addEventListener("keydown",(async function(e){e.ctrlKey&&"s"===e.key&&await saveCanvas()}));let saveButton=document.querySelector(".screenshotToolSave");saveButton.addEventListener("click",(async function(e){await saveCanvas()}));